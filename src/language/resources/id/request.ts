export default {
    default: 'Validation errors',
    'alternatives.all': `{#key} did not match all of the alternative schemas.`,
    'alternatives.any': `{#key} was found to test against the input due to try criteria.`,
    'alternatives.match': `{#key} matched the input due to specific matching rules for at least one of the alternatives.`,
    'alternatives.one': `{#key} matched more than one alternative schema.`,
    'alternatives.types': `{#key} did not match any of the allowed types.`,
    'any.custom': `Custom Error`,
    'any.default': `Default rror`,
    'any.failover': `Fail Error`,
    'any.invalid': `{#key} matched a value listed in the invalid values.`,
    'any.only': `{#key} Only some values were allowed, the input didn't match any of them.`,
    'any.ref': `{#key} A reference was used in rule argument and the value pointed to by that reference in the input is not valid.`,
    'any.required': `{#key} is a required field`,
    'any.unknown': `{#key} was present while it wasn't expected.`,
    'array.base': `{#key} is not of Array type or could not be cast to an Array from a string.`,
    'array.excludes': `{#key} contains a value that is part of the exclusion list.`,
    'array.includesRequiredBoth': `{#key} Some values were expected to be present in the array and are missing. This error happens when we have a mix of labeled and unlabeled schemas.`,
    'array.includesRequiredKnowns': `{#key} Some values were expected to be present in the array and are missing. This error happens when we only have labeled schemas.`,
    'array.includesRequiredUnknowns': `{#key} Some values were expected to be present in the array and are missing. This error happens when we only have unlabeled schemas.`,
    'array.includes': `{#key} didn't match any of the allowed types for that array.`,
    'array.length': `{#key} is not of the expected length.`,
    'array.max': `{#key} has more elements than the maximum allowed.`,
    'array.min': `{#key} has less elements than the minimum allowed.`,
    'array.orderedLength': `{#key} that array has more elements than it should.`,
    'array.sort': `{#key} did not match the required sort order.`,
    'array.sort.mismatching': `{#key} Failed sorting the array due to mismatching item types.`,
    'array.sort.unsupported': `{#key} Failed sorting the array due to unsupported item types.`,
    'array.sparse': `{#key} An undefined value was found in an array that shouldn't be sparse.`,
    'array.unique': `{#key} duplicate value was found in an array.`,
    'array.hasKnown': `{#key} was not found in the array. This error happens when the schema is labeled.`,
    'array.hasUnknown': `{#key} was not found in the array. This error happens when the schema is unlabeled.`,
    'binary.base': `{#key} is either not a Buffer or could not be cast to a Buffer from a string.`,
    'binary.length': `{#key} was not of the specified length ({#limit}).`,
    'binary.max': `{#key} contains more bytes than {#limit}.`,
    'binary.min': `{#key} contains less bytes than {#limit}.`,
    'boolean.base': `{#key} is either not a boolean or could not be cast to a boolean from one of the truthy or falsy values.`,
    'date.base': `{#key} is either not a date or could not be cast to a date from a string or a number.`,
    'date.format': `{#key} does not match the required format.`,
    'date.greater': `{#key} is over than {#limit}.`,
    'date.less': `{#key} is under than {#limit}.`,
    'date.max': `{#key} is over or equal to {#limit}`,
    'date.min': `{#key} is under or equal to {#limit}.`,
    'date.strict': `{#key} Occurs when the input is not a Date type and convert is disabled.`,
    'function.arity': `{#key} doesn't match the required number.`,
    'function.class': `{#key} s not a class.`,
    'function.maxArity': `{#key} The number of arguments for the function is over the required number ({#n}).`,
    'function.minArity': `{#key} The number of arguments for the function is under the required number ({#n}).`,
    'number.base': `{#key} is not a number or could not be cast to a number.`,
    'number.greater': `{#key}  is lower or equal to {#limit}`,
    'number.infinity': `{#key}  is Infinity or -Infinity.`,
    'number.integer': `{#key} is not a valid integer.`,
    'number.less': `{#key} The number is higher or equal to {#limit}`,
    'number.max': `{#key} The number is higher than {#limit}.`,
    'number.min': `{#key} The number is lower than {#limit}.`,
    'number.multiple': `{#key} The number could not be divided by the multiple.`,
    'number.negative': `{#key} The number was positive.`,
    'number.port': `{#key} The number didn't look like a port number.`,
    'number.positive': `{#key} The number was negative.`,
    'number.precision': `{#key} The number didn't have the required precision.`,
    'number.unsafe': `{#key} The number is not within the safe range of numbers.`,
    'object.unknown': `{#key} An unexpected property was found in the object.`,
    'object.and': `{#key} AND condition was not satisfied in that object.`,
    'object.assert': `{#key} failed to validate.`,
    'object.base': `{#key} is not of the expected type.`,
    'object.length': `{#key} The number of keys for this object is not of the expected length ({#limit}).`,
    'object.max': `{#key} The number of keys for this object is over or equal to the limit ({#limit}).`,
    'object.min': `{#key} The number of keys for this object is under or equal to the limit ({#limit}).`,
    'object.missing': `{#key} OR or XOR condition was not satisfied in that object, none of it were set.`,
    'object.nand': `{#key} NAND condition was not satisfied in that object.`,
    'object.pattern.match': `{#key} failed to match a pattern's matches requirement.`,
    'object.refType': `{#key} is not in references.`,
    'object.regex': `{#key} is not a RegExp object.`,
    'object.rename.multiple': `{#key} was already done to the same target property.`,
    'object.rename.override': `{#key} already exists and you disallowed overrides.`,
    'object.schema': `{#key} was not a valid schema.`,
    'object.instance': `{#key}  is not of the type you specified.`,
    'object.with': `{#key} that should have been present at the same time as another one was missing.`,
    'object.without': `{#key} that should have been absent at the same time as another one was present.`,
    'object.xor': `{#key} XOR condition was not satisfied in that object.`,
    'object.oxor': `{#key} XOR condition was not satisfied in that object.`,
    'string.alphanum': `{#key} doesn't only contain alphanumeric characters.`,
    'string.base64': `{#key} isn't a valid base64 string.`,
    'string.base': `{#key} should be a type of string`,
    'string.creditCard': `{#key} is not a valid credit card number.`,
    'string.dataUri': `{#key} is not a valid data URI.`,
    'string.domain': `{#key} is not a valid domain name.`,
    'string.email': `{#key} is not a valid e-mail.`,
    'string.empty': `{#key} cannot be an empty field`,
    'string.guid': `{#key} is not a valid GUID.`,
    'string.hexAlign': `{#key} contains hexadecimal characters but they are not byte-aligned.`,
    'string.hex': `{#key} is not a valid hexadecimal string.`,
    'string.hostname': `{#key} is not a valid hostname.`,
    'string.ipVersion': `{#key} is not a valid IP address considering the provided constraints.`,
    'string.ip': `{#key} is not a valid IP address.`,
    'string.isoDate': `{#key} is not a valid ISO date string.`,
    'string.isoDuration': `{#key} must be a valid ISO 8601 duration.`,
    'string.length': `{#key} is not of the expected {#limit}.`,
    'string.lowercase': `{#key} isn't all lower-cased.`,
    'string.max': `{#key} should have a maximum length of {#limit}`,
    'string.min': `{#key} should have a minimum length of {#limit}`,
    'string.normalize': `{#key} isn't valid in regards of the normalization form expected.`,
    'string.pattern.base': `{#key} didn't match the regular expression.`,
    'string.pattern.name': `{#key} didn't match the named regular expression.`,
    'string.pattern.invert.base': `{#key} matched the regular expression while it shouldn't.`,
    'string.pattern.invert.name': `{#key} matched the named regular expression while it shouldn't.`,
    'string.token': `{#key} isn't a token`,
    'string.trim': `{#key} contains whitespace around it.`,
    'string.uppercase': `{#key} isn't all upper-cased.`,
    'string.uri': `{#key} isn't a valid URI.`,
    'string.uriCustomScheme': `{#key} isn't a valid URI considering the custom schemes.`,
    'string.uriRelativeOnly': `{#key} is a valid relative URI.`,
    'symbol.base': `{#key} is not a Symbol.`,
    'symbol.map': `{#key} is not a Symbol or could not be converted to one.`,
};
